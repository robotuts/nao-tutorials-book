==== Общие сведения

===== Тема

*Тема* -- это скрипт, файл с расширением `.top`, расположенный в текущем проекте и включающий в себя правила. Её *заголовок* должен содержать как минимум _название_ диалога и его _язык_. Например:

[source,qichat]
----
topic: ~introduction ()
language: enu
u:(hello) hello human
----

*Заголовок* -- это первые две строки, `topic: ~introduction ()` и `language: enu`, где первая задаёт тему диалога, а вторая указывает, что разговор будет вестись на английском языке (русский язык обозначается `rur`, весь список поддерживаемых языков можно посмотреть на сайте ‼ссылка). Последняя строчка -- скрипт из одного *правила*, согласно которому в ответ на сказанное человеком `hello` робот должен ответить `hello human`.

===== Правило

*Правила* соотносят вводные данные от человека (то, что он говорит) с выходными данными робота (то, что робот отвечает или делает). Правила начинаются с новой строки и индикатора `u:`. Далее в круглых скобках указываются слова человека, а вне их -- ответ робота.

При помощи разделителей, специальных символов, а также функций и свойств можно создавать
мощные правила, которые в одной строке будут учитывать множество разных случаев. О них будет сказано далее.

В примере выше был представлен пример простого правила, которое конкретной фразе человека (`hello`) сопоставляет конкретный ответ робота (`hello human`). Помимо простых правил, существуют ещё два вида: *подправила* и *инструкции*.

===== Подправило

*Подправила* позволяют создавать несколько контекстов в рамках одной беседы, при этом конкретные подправила активируются только в том случае, если активировано соответствующее  (т.е. более высокого уровня) пользовательское правило или инструкция.

[source,qichat]
----
u:(input1) answer1
   u1:(input2) answer2
   u1:(input3) answer3
     u2:(input4) answer4
        u3:(input5) answer5
     u2:(input6) answer6

proposal: sentence
   u1:(input7) answer
   u1:(input8) answer
----

Здесь `u1:`, `u2:` и `u3:` -- пользовательские подправила. Отступы отражают отношения между правилами и их подправилами.

====== Особенности

Во-первых, _пользовательские правила_ и _инструкции_ активны, когда неактивны **подправила**.

* Если выполняется условие `(input1)` и активируется _правило_ `u:`, то управление переходит к его подправилам `u1:`, но при этом другие _пользовательские правила_ верхнего уровня `u:` остаются активны.
* Если выполняется одно из условий подправил `u1:` (`(input2)` или `(input2)`), то активируется соответствующее подправило. В данном примере или выводится `answer2`, или управление переходит к правилу `u2:`, а правила уровня `u1:` деактивируются.
* Если в любое время активируется другое _пользовательское правило_ **u:**, то остальные подправила деактивируются.

Если требуется находиться в рамках текущего правила, даже если уже было задействовано соответствующее подправило (т.е. роботом был дан ответ), используется  команда **^stayInScope**:

[source,qichat]
----
u:(input) answer
   u1:(input1) answer1 ^stayInScope
   u1:(input2) answer2
----

То есть, даже ответив `answer1` на `input1`, робот не выйдет из контекта и сможет отреагировать также и на `input2`.

===== Инструкции

*Инструкции* -- это список фраз или действий, которые робот высказывает или делает последовательно, реагируя на одно общее ключевое слово.

*Синтаксис:*

Последовательность действий инструкции описывается следующим образом в заголовке скрипта:

[source,qichat]
----
proposal: step1
proposal: step2
proposal: step3
proposal: step4
----

В теле скрипта переход между пунктами активируется фразой человека, например, _next_, и _функцией последовательности_:

[source,qichat]
----
u:(next) ^nextProposal
----

===== Особенности

Для переключения может использоваться одна из следующих *функций последовательности*, помимо приведённой в примере `^nextProposal`:

* `^previousProposal`,
* `^sameProposal`,
* `^goto`,
* `^gotoRandom`,
* `^gotoReactivate`,
* `^topicTag`.

При вызове функции `^sameProposal` робот повторяет последнее предложение в теме, `^previousProposal` -- шедшее перед ним.

В других случаях, когда пункт инструкции высказан, робот уже не может его повторить. Однако может быть использована функция `^gotoReactivate`:

[source,qichat]
----
proposal: %tag Answer
u:(input) ^gotoReactivate(tag)
----

Она позволяет перейти к неактивному пункту инструкции, помеченному соответствующим тегом, и запусть его снова.

Ключевое слово `%tag` может быть применимо не только к пунктам инструкции, но и просто к правилам:

[source,qichat]
----
proposal: %tag sentence
u:(input) %tag answer
----

Оно указывает на одно или неколько инструкций или правил и позволяет напрямую перейти к нему (ним). Функция `^goto` может быть также использована, чтобы обозначить эквивалентными несколько фраз, которые могут поступить от человека, то есть, робот может давать на них один и тот же ответ.

[source,qichat]
----
u: (input1) %tag answer
u: (input2) ^goto(tag)
u: (input3) smth ^goto(tag)
----

Функция `^gotoRandom` работает аналогичным образом, только в случае, если одним тегом помечено несколько выражений, она случайным образом выбирает одно.

[source,qichat]
----
u:(input) ^gotoRandom(tag)
proposal: %tag answer1
proposal: %tag answer2
----

Так же используется `^topicTag`, но для перехода к отмеченному тегом `%tag` ответу из другой темы `topic`.

[source,qichat]
----
^topicTag(topic,tag)
----
