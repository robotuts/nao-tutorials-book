==== Создание сервиса

Сначала напишем свой сервис, который затем зарегистрируем в системе. Для создания сервиса достаточно только создать класс на Python. Создадим класс `HelloService`, который по команде `greet(name)` будет приветствовать пользователя:

[source,python]
----
class HelloService:
    def __init__(self, session):  # <1>
        self.tts = session.service("ALTextToSpeech")

    def greet(self, name):        # <2>
        self.tts.say("Hello, %s" % name)
----
<1> Конструктор класса на языке Python. Аргумент `session` используем для вызова сервиса `ALTextToSpeech`.
<2> Функция сервиса, принимает на вход переменную `name` и вызывает функцию `say()` с аргументом `Hello, #{name}`.

Чтобы мы могли подключаться к сервису, нужно создать объект класса `HelloService` и зарегистрировать его в системе:

[source,python]
----
hello = HelloService(app.session)
app.session.registerService("Hello", hello)
----

Вместе с инициализацией `Application` программа-сервис выглядит следующим образом:

[source,python]
.server.py
----
import qi
import sys

# Creating a server
class HelloService:
    def __init__(self, session):
        self.tts = session.service("ALTextToSpeech")

    def greet(self, name):
        self.tts.say("Hello, %s" % name)

# Creating a session
app = qi.Application(sys.argv)
app.start()

# Register service
hello = HelloService(app.session)
app.session.registerService("Hello", hello)

app.run() # <1>
----
<1> Ожидается, что сервер будет зарегистрирован в системе до тех пор, пока он не будет отключен, поэтому требуется вызвать функцию `run()`.

Теперь мы можем использовать сервис в другом скрипте аналогично всем остальным сервисам:

[source,python]
.client.py
----
import qi
import sys

# Creating a session
app = qi.Application(sys.argv)
app.start()

# Test our service
hello = app.session.service("Hello") # <1>
hello.greet("dear user")
----
<1> Имя сервиса, которое мы использовали при его регистрации.

После запуска обоих скриптов (очевидно, `server.py` запускается первым) робот произнесет `Hello, dear user`.

TIP: После запуска `python server.py --qi-url=...` консоль будет занята сервером, нужно открыть дополнительную консоль и в ней набрать `vagrant ssh -c "python client.py --qi-url=..."`.
